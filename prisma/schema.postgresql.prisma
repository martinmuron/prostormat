// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // for credential-based auth
  phone         String?
  role          String    @default("user") // user, venue_manager, admin
  company       String?   // for event organizers
  accounts      Account[]
  sessions      Session[]
  venues        Venue[]
  eventRequests EventRequest[]
  venueInquiries VenueInquiry[]
  blogPosts     BlogPost[]
  venueBroadcasts VenueBroadcast[]
  emailFlowLogs EmailFlowLog[]
  eventRequestFavorites EventRequestFavorite[]
  passwordResetTokens PasswordResetToken[]
  venueClaims VenueClaim[]
  createdAt     DateTime  @default(now())

  @@map("prostormat_users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id               String   @id @default(cuid())
  name             String
  slug             String   @unique
  description      String?
  address          String
  district         String?  // Prague district (Praha 1, Praha 2, etc.)
  capacitySeated   Int?
  capacityStanding Int?
  venueType        String?  // DEPRECATED - use venueTypes
  venueTypes       String[] @default([]) // Multiple categories per venue
  amenities        String[]
  contactEmail     String?
  contactPhone     String?
  websiteUrl       String?
  instagramUrl     String?  // Instagram URL
  images           String[]
  videoUrl         String?
  youtubeUrl       String?  // YouTube URL
  musicAfter10     Boolean? // Can play music after 22:00
  status           String   @default("draft") // draft, active, expired, pending, published
  isRecommended    Boolean  @default(false) // Featured/recommended venue
  priority         Int?     // 1 = highest priority, null = no priority
  parentId         String?
  managerId        String
  subscriptionId   String?  // Stripe subscription ID
  paymentDate      DateTime? // When the 12,000 CZK was paid
  expiresAt        DateTime?
  lastViewedAt     DateTime? // Last time venue was viewed
  totalViews       Int      @default(0) // Total view count
  views            Int      @default(0) // View count
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  manager      User           @relation(fields: [managerId], references: [id])
  parent       Venue?         @relation("VenueHierarchy", fields: [parentId], references: [id])
  subVenues    Venue[]        @relation("VenueHierarchy")
  inquiries    VenueInquiry[]
  subscription Subscription?
  broadcastLogs VenueBroadcastLog[]
  claims       VenueClaim[]
  homepageSlot HomepageVenue?

  @@map("prostormat_venues")
}

model VenueClaim {
  id             String   @id @default(cuid())
  venueId        String
  claimantId     String
  status         String   @default("pending")
  message        String?
  submissionData String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  venue    Venue @relation(fields: [venueId], references: [id])
  claimant User  @relation(fields: [claimantId], references: [id])
  paymentIntent PaymentIntent? @relation("PaymentIntentClaim")

  @@map("prostormat_venue_claims")
}

model HomepageVenue {
  id        String   @id @default(cuid())
  position  Int      @unique
  venueId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  venue Venue @relation(fields: [venueId], references: [id])

  @@map("prostormat_homepage_venues")
}

model EventRequest {
  id                  String   @id @default(cuid())
  userId              String
  title               String
  description         String?
  eventType           String   // firemni-akce, teambuilding, svatba, soukroma-akce
  eventDate           DateTime?
  guestCount          Int?
  guestCountStandingRange String?
  guestCountSeatedRange   String?
  budgetRange         String?
  locationPreference  String?  // Praha 1, Praha 2, etc.
  requirements        String?
  contactEmail        String   // PUBLIC - for direct contact
  contactPhone        String?
  contactName         String   // PUBLIC
  status              String   @default("active") // active, closed, expired
  expiresAt           DateTime
  createdAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  favorites EventRequestFavorite[]

  @@map("prostormat_event_requests")
}

model VenueInquiry {
  id         String    @id @default(cuid())
  venueId    String
  userId     String?   // can be null for anonymous inquiries
  name       String
  email      String
  phone      String?
  eventDate  DateTime?
  guestCount Int?
  message    String?
  createdAt  DateTime  @default(now())

  venue Venue @relation(fields: [venueId], references: [id])
  user  User? @relation(fields: [userId], references: [id])
}

model Subscription {
  id                   String   @id @default(cuid())
  venueId              String   @unique
  stripeSubscriptionId String   @unique
  stripeCustomerId     String
  status               String   // active, canceled, past_due
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())

  venue Venue @relation(fields: [venueId], references: [id])
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String?
  content         String
  coverImage      String?
  status          String   @default("draft") // draft, published
  authorId        String
  tags            String // JSON array
  metaTitle       String?
  metaDescription String?
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])

  @@map("prostormat_blog_posts")
}

model VenueBroadcast {
  id               String   @id @default(cuid())
  userId           String
  title            String
  description      String
  eventType        String   // firemni-akce, teambuilding, svatba, soukroma-akce
  eventDate        DateTime?
  guestCount       Int?
  budgetRange      String?
  locationPreference String?  // Praha 1, Praha 2, etc.
  requirements     String?
  contactEmail     String
  contactPhone     String?
  contactName      String
  sentVenues       String[] // Array of venue IDs that received the email
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  logs VenueBroadcastLog[]

  @@map("prostormat_venue_broadcasts")
}

model VenueBroadcastLog {
  id            String   @id @default(cuid())
  broadcastId   String
  venueId       String
  sentAt        DateTime @default(now())
  emailStatus   String   @default("sent") // sent, delivered, failed, pending, skipped
  emailError    String?  // Error message if email failed

  // Resend tracking fields
  resendEmailId     String?   @unique
  emailDeliveredAt  DateTime?
  emailOpenedAt     DateTime?
  emailClickedAt    DateTime?
  emailBouncedAt    DateTime?
  bounceType        String?
  emailComplainedAt DateTime?
  openCount         Int       @default(0)
  clickCount        Int       @default(0)

  broadcast VenueBroadcast @relation(fields: [broadcastId], references: [id])
  venue Venue @relation(fields: [venueId], references: [id])

  @@map("prostormat_venue_broadcast_logs")
}

model EmailFlowLog {
  id               String           @id
  emailType        String
  recipient        String
  subject          String
  status           String
  error            String?
  recipientType    String?
  sentBy           String
  createdAt        DateTime         @default(now())
  user             User             @relation(fields: [sentBy], references: [id])

  @@map("prostormat_email_flow_logs")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  usedAt    DateTime?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("prostormat_password_reset_tokens")
}

model EventRequestFavorite {
  id               String           @id @default(cuid())
  userId           String
  eventRequestId   String
  createdAt        DateTime         @default(now())

  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventRequest     EventRequest     @relation(fields: [eventRequestId], references: [id], onDelete: Cascade)

  @@unique([userId, eventRequestId])
}

model PaymentIntent {
  id                     String    @id @default(cuid())
  stripePaymentIntentId  String    @unique
  venueData              String    // JSON string of venue form data
  userEmail              String
  status                 String    @default("pending") // pending, completed, failed
  venueId                String?   // Set after venue is created
  venueClaimId           String?   @unique
  paymentCompletedAt     DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  venueClaim VenueClaim? @relation("PaymentIntentClaim", fields: [venueClaimId], references: [id])

  @@map("prostormat_payment_intents")
}

model EmailTemplate {
  id          String   @id @default(cuid())
  templateKey String   @unique // welcome_user, welcome_location_owner, etc.
  name        String   // Display name
  subject     String   // Email subject line
  htmlContent String   // HTML email content
  textContent String?  // Plain text fallback
  variables   String[] // Array of variable placeholders like {{name}}, {{email}}
  description String?  // What this template is used for
  isActive    Boolean  @default(true) // Can be toggled on/off
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prostormat_email_templates")
}

model EmailTrigger {
  id           String   @id @default(cuid())
  triggerKey   String   @unique // user_registration, venue_inquiry, etc.
  name         String   // Display name
  description  String?  // What triggers this email
  templateKey  String   // Links to EmailTemplate.templateKey
  isEnabled    Boolean  @default(false) // Toggle on/off
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("prostormat_email_triggers")
}
